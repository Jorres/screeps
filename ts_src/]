// @ts-ignore
var U = require('U');
// @ts-ignore
var storageSelector = require('storageSelector');

var roleSimpleBuilder = {
    run: function(creep: Creep, newState ?: AutomataState) {
        if (newState) {
            creep.memory.autoState = newState;
        } else if (!creep.memory.autoState) {
            creep.memory.autoState = 'harvest';
        }

        if (creep.memory.actionTaken) {
            return;
        }

        if (creep.memory.autoState == 'harvest') {
            this.harvestingState(creep);
        } else if (creep.memory.autoState == 'tryBuild') {
            this.tryBuildingState(creep);
        } else if (creep.memory.autoState == 'tryRepair') {
            this.tryRepairingState(creep);
        } 
    },


    harvestingState: function(creep: Creep): void {
        if (creep.store.getFreeCapacity() == 0) {
            this.run(creep, 'tryBuild');
        } else {
            let targetId = storageSelector.selectStorageId(creep);
            if (targetId) {
                U.moveAndWithdraw(creep, U.getById(targetId), RESOURCE_ENERGY);
            } else {
                let target = creep.pos.findClosestByPath(FIND_SOURCES);
                if (target) {
                    U.moveAndHarvest(creep, target);
                }
            }
        }
    },

    tryBuildingState: function(creep: Creep): void {
        if (creep.store.getUsedCapacity(RESOURCE_ENERGY) == 0) {
            this.run(creep, 'harvest');
            return;
        }

        reselectConstructingDestination(creep);
        if (creep.memory.currentActiveDestinationId) {
            U.moveAndBuild(creep, U.getById(creep.memory.currentActiveDestinationId)); 
        } else {
            this.run(creep, 'tryRepair');
        }
    }

    tryRepairingState: function(creep: Creep): void {
        let usedCapacity = creep.store.getUsedCapacity(RESOURCE_ENERGY);
        let freeCapacity = creep.store.getUsedCapacity(RESOURCE_ENERGY);

        if (usedCapacity == 0) {
            this.run(creep, 'harvest');
            return;
        }

        reselectRepairingDestination(creep);
        if (creep.memory.currentActiveDestinationId) {
            U.moveAndRepair(creep, U.getById(creep.memory.currentActiveDestinationId));
        } else {
            if (freeCapacity > 0) {
                this.run(creep, 'harvest');
            } else {
                U.moveToSpawn(creep);
            }
        }
    },

    reselectConstructingDestination: function(creep: Creep): void {
        let id: string = creep.memory.currentActiveDestinationId;
        let sites = creep.room.find(FIND_CONSTRUCTION_SITES);
        for (let site of sites) {
            if (id && id == site.id) {
                return;
            }
        }

        let target = creep.room.find(FIND_CONSTRUCTION_SITES, U.filterBy(STRUCTURE_CONTAINER))[0]; 
        if (!target) {
            target = creep.pos.findClosestByRange(FIND_CONSTRUCTION_SITES);
        }
        creep.memory.currentActiveDestinationId = target ? target.id : null;
    },

    reselectRepairingDestination: function(creep: Creep): void {
        let id: string = creep.memory.currentActiveDestinationId;
        if (id && creep.store.getUsedCapacity(RESOURCE_ENERGY) > 0) {
            return;
        }

        U.findBest(FIND_STRUCTURES, (structure) => {
            structure.hitsMax - structure.hits;
        })

        let bestDiff = -1;
        let bestDestinationId = null;
        let structures = creep.room.find(FIND_STRUCTURES);
        for (let structure of structures) {
            let curDiff = structure.hitsMax - structure.hits;
            if (curDiff > bestDiff) {
                bestDiff = curDiff;
                bestDestinationId = structure.id;
            }
        }
        creep.memory.currentActiveDestinationId = bestDestinationId;
    }

};



// @ts-ignore
module.exports = roleSimpleBuilder;
